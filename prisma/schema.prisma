generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // for migrations
}

model Profile {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @unique @db.Uuid
  userName     String
  userLastname String

  //Relaciones
  tickets  Ticket[] //Remember, this is a virtual field only, there will not be a ticket field in table
  comments Comment[]

  @@index([userId])
}

model Organization {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String

  //relations
  members UserOrganization[]
}

model UserOrganization {
  id String @id @default(cuid())

  role     ROLE     @default(MEMBER)
  joinedAt DateTime @default(now())

  // relations
  userId         String       @db.Uuid
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId]) //John cannot be 2ice in same organization, crea como un indice automatico
  @@index([userId]) // para busquedas por userId
  @@index([role]) // para busquedas por role
}

enum ROLE {
  MEMBER
  ADMIN
}

model Ticket {
  id        String       @id @default(cuid()) //mandatory to be
  createdAt DateTime     @default(now()) //mandatory to be
  updatedAt DateTime     @updatedAt //mandatory to be
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  deadline  String
  bounty    Int
  profileId String //TODO: migrate to userId for better consistency.

  //Relaciones
  profile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@index([profileId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(1024)

  // Relaciones
  authorId String? // Reference to Profile who writes comment
  author   Profile? @relation(fields: [authorId], references: [id], onDelete: SetNull)

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
}
